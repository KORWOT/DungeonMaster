최종 목표: 결정론적 전투 시스템 완성
우리가 함께 만들고자 하는 최종 목표는 **'서버와 클라이언트가 100% 동일한 결과를 보장하는, 데이터와 로직이 분리된 결정론적 전투 시스템'**입니다.

이 목표를 달성하기 위해, 지금부터 아래 순서대로 작업을 진행하는 것이 가장 올바른 방향입니다.

## 핵심 설계 원칙

### 🏆 SOLID 원칙 준수 (최우선)
모든 코드는 **SOLID 원칙**을 철저히 준수하여 유지보수성과 확장성을 보장합니다:
- **S**ingle Responsibility: 각 클래스는 하나의 책임만 가집니다
- **O**pen/Closed: 확장에는 열려있고 수정에는 닫혀있는 구조
- **L**iskov Substitution: 파생 클래스는 기본 클래스를 완전히 대체 가능
- **I**nterface Segregation: 클라이언트가 사용하지 않는 메서드에 의존하지 않음
- **D**ependency Inversion: 고수준 모듈이 저수준 모듈에 의존하지 않음

### 🌐 다국어 지원 시스템 (Localization System)
- **언어 커스텀 기능**을 염두에 두고 모든 텍스트 데이터를 분리하여 관리합니다.
- 게임 내 모든 문자열은 **Key-Value 기반의 다국어 시스템**을 통해 처리됩니다.
- 런타임에 언어 변경이 가능하도록 설계하며, 새로운 언어 추가 시 코드 변경 없이 확장 가능합니다.
- 숫자 형식, 날짜 형식, 통화 표시 등 지역화 요소도 함께 고려합니다.

### ⚡ 커스텀 틱 시스템 (Custom Tick System)
- Unity의 Update()나 FixedUpdate()에 의존하지 않는 **독립적인 틱 기반 시스템**을 구현합니다.
- 고정된 틱 간격(예: 60 틱/초)으로 모든 게임 로직을 처리하여 프레임률과 무관한 일관된 결과를 보장합니다.
- 각 틱마다 전체 게임 상태를 계산하고, 클라이언트는 이 결과를 받아 표현만 담당합니다.

### 🔒 서버 검증 확장 염두 (Server Validation Ready)
- 모든 게임 로직이 서버에서 검증 가능하도록 **순수 C# 코드**로만 구현합니다.
- 클라이언트 예측(Client Prediction)과 서버 권한(Server Authority) 구조를 쉽게 적용할 수 있도록 설계합니다.
- 향후 멀티플레이어 확장 시 최소한의 코드 변경으로 서버 검증을 추가할 수 있습니다.

---

## 1단계: 모든 데이터의 '뼈대' 정의하기 (Enums)
가장 먼저, 게임에 사용될 모든 데이터의 **'종류'**를 정의해야 합니다. 이 작업은 집을 짓기 전에 어떤 종류의 자재를 쓸지 목록을 만드는 것과 같습니다.

**해야 할 일:** CharacterTypes.cs와 같이, 게임에 필요한 모든 enum을 하나의 파일 또는 여러 파일에 정의합니다.

**핵심 원칙:** 이전에 배운 대로, 모든 enum에는 반드시 고유한 숫자 값을 명시적으로 할당해야 합니다.

**예시 CharacterTypes.cs**
```csharp
public enum AttributeType : ushort 
{ 
    None = 0, 
    Fire = 101, 
    Water = 102, 
    ... 
}

public enum Grade : ushort 
{ 
    None = 0, 
    C = 1001, 
    UC = 1002, 
    ... 
}
// ... 기타 모든 enum ...
```

## 2단계: 데이터의 '구조' 설계하기 (DTO - Data Transfer Objects)
다음으로, 게임의 모든 상태를 담을 **'데이터의 그릇'**을 순수 C# 클래스로 설계합니다. 이 데이터는 Unity에 전혀 의존하지 않아야 합니다.

**해야 할 일:** DeterministicCharacterData, BattleState와 같이, 전투에 필요한 모든 '상태'를 담는 DTO 클래스들을 만듭니다.

**핵심 원칙:**
- 모든 수치 데이터는 float 대신 **long 또는 int**를 사용합니다.
- 스탯처럼 확장될 가능성이 있는 데이터는 Dictionary<StatType, long>와 같이 유연한 구조를 사용합니다.
- **틱 기반 시스템**을 위해 모든 시간 관련 데이터는 틱 단위로 관리합니다.
- **SOLID 원칙**을 준수하여 각 DTO는 단일 책임을 가지며, 확장에 열려있는 구조로 설계합니다.
- **다국어 지원**을 위해 모든 텍스트 데이터는 LocalizationKey 형태로 관리합니다.

**예시 DeterministicCharacterData.cs**
```csharp
public class DeterministicCharacterData
{
    public readonly long InstanceId;
    public long CurrentHP;
    public Dictionary<StatType, long> Stats = new Dictionary<StatType, long>();
    public long LastActionTick;  // 틱 기반 시간 관리
    public LocalizationKey NameKey;  // 다국어 지원
    // ...
}
```

## 3단계: 로직의 '두뇌' 구현하기 (Rules & Factory)
데이터의 구조가 완성되면, 이 데이터를 가지고 실제 **'계산'**을 수행할 두뇌를 만듭니다. 이 역시 순수 C# 클래스여야 합니다.

**해야 할 일:**
- **CharacterDataFactory**: CardBlueprintData와 UserCardData를 조합하여 초기 DeterministicCharacterData를 생성하는 로직을 구현합니다.
- **DeterministicBattleRules**: BattleState를 입력받아, 전투의 한 틱(tick)을 진행시키고 새로운 BattleState를 반환하는 ProcessTick 메서드를 구현합니다. 모든 데미지 계산, 쿨타임 감소 등의 로직이 여기에 들어갑니다.
- **TickManager**: 고정된 간격으로 틱을 관리하고, 각 틱마다 게임 상태를 업데이트하는 시스템을 구현합니다.
- **LocalizationManager**: 다국어 지원을 위한 텍스트 관리 시스템을 구현합니다.

**핵심 원칙:**
- UnityEngine.Random 대신 **System.Random**을 seed 값과 함께 사용합니다.
- Mathf 대신 **System.Math**를 사용합니다.
- Resources.Load 같은 Unity API를 절대 사용하지 않습니다.
- **모든 로직은 틱 단위로 동작**하도록 설계합니다.
- **서버 검증이 가능**하도록 입력-출력이 명확한 순수 함수로 구현합니다.
- **SOLID 원칙**을 철저히 준수하여 각 클래스는 단일 책임을 가지며, 인터페이스를 통한 의존성 주입을 적극 활용합니다.
- **다국어 시스템**과 연동하여 모든 텍스트는 LocalizationKey를 통해 처리합니다.

## 4단계: '표현' 계층 구현하기 (Unity MonoBehaviour)
마지막으로, 계산된 데이터를 화면에 보여주는 **'배우'**들을 Unity에서 구현합니다.

**해야 할 일:**
- **ICharacter 인터페이스**: 로직 없이, 오직 ApplyState와 Play...Effect 같은 표현용 메서드만 가지도록 재설계합니다.
- **ClientMonster, ClientEnemy**: ICharacter를 구현하는 MonoBehaviour 클래스를 만듭니다. 이 클래스들은 DeterministicCharacterData를 받아 UI를 갱신하고 애니메이션을 재생하는 역할만 합니다.
- **BattleManager**: 모든 것을 총지휘하는 '연출가'입니다. **커스텀 틱 시스템**을 사용하여 매 틱 새로운 BattleState를 계산하고, 계산된 결과를 모든 ClientMonster의 ApplyState에 전달하여 화면을 동기화합니다.

**핵심 원칙:**
- 표현 계층은 **절대로 게임 로직을 포함하지 않습니다**.
- 모든 상태 변화는 **틱 시스템**에서 계산된 결과만 반영합니다.
- **서버 검증 확장**을 위해 네트워크 계층을 쉽게 추가할 수 있도록 인터페이스를 설계합니다.
- **SOLID 원칙**에 따라 각 컴포넌트는 명확한 역할 분리를 유지합니다.
- **다국어 지원**을 위해 모든 UI 텍스트는 LocalizationManager를 통해 동적으로 로드됩니다.

---

## 확장 가능성 고려사항

### 향후 서버 검증 확장 시
- 현재의 DeterministicBattleRules를 서버에서 그대로 사용할 수 있습니다.
- 클라이언트는 예측 실행 후 서버 결과로 보정하는 구조로 쉽게 확장 가능합니다.
- 모든 게임 상태가 직렬화 가능한 DTO로 설계되어 네트워크 전송이 용이합니다.

### 커스텀 틱 시스템의 장점
- 프레임률과 무관한 일관된 게임플레이 보장
- 리플레이 시스템 구현 용이
- 서버-클라이언트 동기화 단순화
- 디버깅 및 테스트 용이성 향상

### SOLID 원칙 준수의 이점
- **유지보수성**: 각 클래스의 책임이 명확하여 수정 시 영향 범위가 최소화됩니다.
- **확장성**: 새로운 기능 추가 시 기존 코드 변경 없이 확장 가능합니다.
- **테스트 용이성**: 의존성 주입을 통해 단위 테스트 작성이 쉬워집니다.
- **재사용성**: 잘 분리된 컴포넌트는 다른 프로젝트에서도 재사용 가능합니다.

### 다국어 지원 시스템의 활용
- **런타임 언어 변경**: 게임 중 언어 변경 시 즉시 적용 가능
- **쉬운 번역 작업**: 개발자가 아닌 번역자도 쉽게 작업 가능한 구조
- **지역화 확장**: 텍스트뿐만 아니라 이미지, 오디오 등 모든 리소스 지역화 가능
- **A/B 테스트**: 다양한 텍스트 버전을 테스트하여 최적의 UX 제공

---

이 4단계 계획은 우리가 논의했던 모든 핵심 원칙을 담고 있으며, **SOLID 원칙 준수**, **다국어 지원 시스템**, **커스텀 틱 시스템**, **서버 검증 확장**까지 염두에 둔 가장 효율적이고 올바른 방향입니다. 이 순서대로 진행하시면, 중간에 길을 잃지 않고 최종 목표까지 도달할 수 있을 것입니다.